// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Prisma schema for AggieX Accelerator Website
// Run `npx prisma migrate dev --name init` after editing

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Application {
  id          Int      @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String   @unique
  affiliation String   // current-student, alumni, faculty, researcher, partner, other
  role        String   // founder, student-builder, alumni-mentor, advisor, investor, partner, other
  message     String?  @db.Text // optional additional information
  status      String   @default("pending") // pending, approved, rejected, waitlisted
  
  // New coalition and program fields
  programs    Json?    // { coalition: boolean, incubator: boolean, accelerator: boolean }
  coalitionRole String? // What interests them about the coalition
  startupIdea String?  @db.Text // Startup idea description
  experience  String?  @db.Text // Relevant experience or skills
  leadershipExperience String? @db.Text // Leadership experience
  orgInvolvement String? @db.Text // Student organization involvement
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  contact     Contact? @relation(fields: [email], references: [email])

  @@map("applications")
}

model Contact {
  id                    String   @id @default(cuid())
  email                 String   @unique
  firstName             String?
  lastName              String?
  phone                 String?
  source                String   // "podcast", "application", "newsletter", etc.
  interests             String[] // ["startups", "investing", "mentoring", "podcast"]
  status                String   @default("active") // "active", "unsubscribed", "bounced"
  newsletterSubscribed  Boolean  @default(true)
  podcastNotifications  Boolean  @default(true)
  lastEngagement        DateTime?
  engagementCount       Int      @default(0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Email verification fields
  emailVerified         Boolean  @default(false)
  verificationToken     String?  @unique
  verificationExpires   DateTime?
  verificationSentAt    DateTime?

  // Relations
  application           Application?
  newsletterRecipients  NewsletterRecipient[]

  @@map("contacts")
}

model NewsletterCampaign {
  id        String   @id @default(cuid())
  name      String
  subject   String
  content   String   @db.Text
  status    String   // "draft", "scheduled", "sent"
  sentAt    DateTime?
  createdAt DateTime @default(now())

  // Relations
  recipients NewsletterRecipient[]

  @@map("newsletter_campaigns")
}

model NewsletterRecipient {
  id         String   @id @default(cuid())
  campaignId String
  campaign   NewsletterCampaign @relation(fields: [campaignId], references: [id])
  contactId  String
  contact    Contact  @relation(fields: [contactId], references: [id])
  status     String   // "sent", "delivered", "opened", "clicked", "bounced"
  sentAt     DateTime @default(now())
  openedAt   DateTime?
  clickedAt  DateTime?

  @@map("newsletter_recipients")
}

model Organization {
  id              String   @id @default(cuid())
  name            String   @unique
  description     String   @db.Text
  logoUrl         String?
  websiteUrl      String?
  meetingSchedule String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  leaders         OrganizationLeader[]

  @@map("organizations")
}

model OrganizationLeader {
  id             String   @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  name           String
  email          String?
  role           String?
  isPrimary      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("organization_leaders")
}

model PartnershipRequest {
  id              String   @id @default(cuid())
  organizationName String
  contactName     String
  contactEmail    String
  description     String   @db.Text
  goals           String   @db.Text
  status          String   @default("pending") // "pending", "approved", "rejected"
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("partnership_requests")
}